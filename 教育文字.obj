--2点(x1,y1)と(x2,y2)を結ぶ幅wの線を描く
local function drawLine(x0, y0, x1, y1, x2, y2, x3, y3, w, uStartT, uEndT, color)
    local theta = math.atan2(y2 - y1, x2 - x1)
    local preTheta = 0
    local nxtTheta = 0
    local dir12 = 1
    local dir34 = 1
    if x0 ~= nil and y0 ~= nil then
        preTheta = math.atan2(y1 - y0, x1 - x0)
    else
        preTheta = theta + math.pi / 2
    end
    if x3 ~= nil and y3 ~= nil then
        nxtTheta = math.atan2(y3 - y2, x3 - x2)
    else
        nxtTheta = theta + math.pi / 2
    end

    --debug_print(string.format("preTheta-theta=%f", preTheta-theta))
    local offset12 = w / math.sin(theta - preTheta)
    local offset34 = w / math.sin(theta - nxtTheta)
    if((x2 - x1) * offset12 * math.cos(theta) > 0) then
        dir12 = -1
    end
    if((x2 - x1) * offset34 * math.cos(theta) > 0) then
        dir34 = -1
    end
    local vertex_x1 = x1 + offset12 * math.cos(preTheta) + offset12 * math.cos(theta) * dir12
    local vertex_y1 = y1 + offset12 * math.sin(preTheta) + offset12 * math.sin(theta) * dir12
    local vertex_x2 = x1 - offset12 * math.cos(preTheta) + offset12 * math.cos(theta) * dir12
    local vertex_y2 = y1 - offset12 * math.sin(preTheta) + offset12 * math.sin(theta) * dir12
    local vertex_x3 = x2 + offset34 * math.cos(nxtTheta) - offset34 * math.cos(theta) * dir34
    local vertex_y3 = y2 + offset34 * math.sin(nxtTheta) - offset34 * math.sin(theta) * dir34
    local vertex_x4 = x2 - offset34 * math.cos(nxtTheta) - offset34 * math.cos(theta) * dir34
    local vertex_y4 = y2 - offset34 * math.sin(nxtTheta) - offset34 * math.sin(theta) * dir34

    local vertex_x1t = vertex_x1 + (vertex_x3 - vertex_x1) * uStartT
    local vertex_y1t = vertex_y1 + (vertex_y3 - vertex_y1) * uStartT
    local vertex_x2t = vertex_x2 + (vertex_x4 - vertex_x2) * uStartT
    local vertex_y2t = vertex_y2 + (vertex_y4 - vertex_y2) * uStartT
    local vertex_x3t = vertex_x1 + (vertex_x3 - vertex_x1) * uEndT
    local vertex_y3t = vertex_y1 + (vertex_y3 - vertex_y1) * uEndT
    local vertex_x4t = vertex_x2 + (vertex_x4 - vertex_x2) * uEndT
    local vertex_y4t = vertex_y2 + (vertex_y4 - vertex_y2) * uEndT

    obj.load("figure", "四角形", color, 1)
    obj.drawpoly(vertex_x1t, vertex_y1t, 0,   vertex_x2t, vertex_y2t, 0,    vertex_x4t, vertex_y4t, 0,    vertex_x3t, vertex_y3t, 0)
end

--track0:個数,2,16,3,1
--track1:幅,0,100,20
--track2:始点,0,100,0
--track3:終点,0,100,100
--dialog:色/col,color=0xffffff;グリッド間隔,grid=50;座標,pos={-200,200, -200,-200, 200,200};

local num=obj.track0
local w = obj.track1/2
obj.setanchor("pos", num, "line")
local startT = obj.track2 / 100
local endT = obj.track3 / 100
local t = obj.time / obj.totaltime
local myPos = {}
local lengths = {}
local sumNormLengthFront = {} --(num-1)個
sumNormLengthFront[1] = 0

--グリッドにスナップする
for i=0, 2 * num - 1 do
    myPos[i + 1] = math.floor(pos[i + 1] / grid + 0.5) * grid
end

local tmpSum = 0
for i=0, num - 2 do
    local x1 = myPos[2 * i + 1]
    local y1 = myPos[2 * i + 2]
    local x2 = myPos[2 * i + 3]
    local y2 = myPos[2 * i + 4]
    lengths[i + 1] = math.sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1))
    tmpSum = tmpSum + lengths[i + 1]
end

for i=0, num - 2 do
    lengths[i + 1] = lengths[i + 1] / tmpSum
    sumNormLengthFront[i + 2] = sumNormLengthFront[i + 1] + lengths[i + 1]
    --sumNormLengthBack[i + 2] = sumNormLengthBack[i + 1] + lengths[num - 1 - i]
end

--drawLine(pos[1], pos[2], pos[3], pos[4], pos[5], pos[6], pos[7], pos[8], w, 0, 1)

for i=0, num - 2 do --線の本数は(num-1)個
    local uStartT = (startT - sumNormLengthFront[i + 1]) / (sumNormLengthFront[i + 2] - sumNormLengthFront[i + 1])
    local uEndT = (endT - sumNormLengthFront[i + 1]) / (sumNormLengthFront[i + 2] - sumNormLengthFront[i + 1])
    uStartT = math.max(uStartT, 0)
    uEndT = math.min(uEndT, 1)
    --debug_print(string.format("uStartT=%f, uEndT=%f", uStartT, uEndT))
    if uStartT < uEndT and uEndT > 0 then
        local x0 = myPos[2 * i - 1]
        local y0 = myPos[2 * i]
        local x1 = myPos[2 * i + 1]
        local y1 = myPos[2 * i + 2]
        local x2 = myPos[2 * i + 3]
        local y2 = myPos[2 * i + 4]
        local x3 = myPos[2 * i + 5]
        local y3 = myPos[2 * i + 6]
        drawLine(x0, y0, x1, y1, x2, y2, x3, y3, w, uStartT, uEndT, color)
    end
end
